{"version":3,"sources":["dialog.babel.js","lazy-load.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"common-app.concat.js","sourcesContent":["'use strict';\n\nfunction dialog(dialogPolyfill) {\n  // select all modal and convert node list to array\n  var modalContainers = [].slice.call(document.querySelectorAll('.dcf-js-dialog'));\n\n  modalContainers.forEach(function (modalContainer) {\n    var trigger = modalContainer.querySelector('.dcf-js-dialog-trigger');\n    var modalDialog = modalContainer.querySelector('dialog');\n    var closeButton = modalContainer.querySelector('.dcf-o-dialog__close');\n\n    // if global dialog property not present, register all dialog modal with polyfill\n    if (!window.HTMLDialogElement) {\n      dialogPolyfill.registerDialog(modalDialog);\n    }\n\n    // show dialog on trigger button click\n    trigger.addEventListener('click', function () {\n      modalDialog.showModal();\n      // translate doesn't seem to work on dialog\n      modalDialog.style.top = 'calc(50% - ' + modalDialog.scrollHeight / 2 + 'px)';\n    });\n\n    // close dialog on close button click\n    closeButton.addEventListener('click', function () {\n      modalDialog.close('closed');\n    });\n\n    // close dialog on Esc button press\n    modalDialog.addEventListener('cancel', function () {\n      modalDialog.close('cancelled');\n    });\n\n    // close dialog when clicking on dialog backdrop\n    // for this to work properly, child elements of dialog must span the entire region\n    // within the dialog box so that when clicking within the dialog, child elements\n    // are clicked on instead of the dialog box itself\n    modalContainer.addEventListener('click', function (e) {\n      if (e.target == modalDialog) {\n        modalDialog.close('cancelled');\n      }\n    });\n  });\n\n  return dialogPolyfill;\n}","'use strict';\n\n// https://github.com/deanhume/lazy-observer-load/blob/master/lazy-load.js\n\n// Get all of the images that are marked up to lazy load\nvar images = document.querySelectorAll('.dcf-lazy-img');\nvar config = {\n  // If the image gets within 50px in the Y axis, start the download.\n  //   rootMargin: '0px 0px 50px 0px',\n  rootMargin: '0px',\n  //   threshold: 0.01\n  threshold: 0.5\n};\n\nvar imageCount = images.length;\nvar observer = void 0;\n\n// If we don't have support for intersection observer, loads the images immediately\nif (!('IntersectionObserver' in window)) {\n  loadImagesImmediately(images);\n} else {\n  // It is supported, load the images\n  observer = new IntersectionObserver(onIntersection, config);\n\n  // foreach() is not supported in IE\n  for (var i = 0; i < images.length; i++) {\n    var image = images[i];\n    if (image.classList.contains('dcf-lazy-img-handled')) {\n      continue;\n    }\n\n    observer.observe(image);\n  }\n}\n\n/**\n * Fetches the image for the given URL\n * @param {string} url\n */\nfunction fetchImage(url) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n    image.src = url;\n    image.onload = resolve;\n    image.onerror = reject;\n  });\n}\n\n/**\n * Preloads the image\n * @param {object} image\n */\nfunction preloadImage(image) {\n  var src = image.dataset.src;\n  if (!src) {\n    return;\n  }\n\n  return fetchImage(src).then(function () {\n    applyImage(image, src);\n  });\n}\n\n/**\n * Load all of the images immediately\n * @param {NodeListOf<Element>} images\n */\nfunction loadImagesImmediately(images) {\n  // foreach() is not supported in IE\n  for (var _i = 0; _i < images.length; _i++) {\n    var _image = images[_i];\n    preloadImage(_image);\n  }\n}\n\n/**\n * Disconnect the observer\n */\nfunction disconnect() {\n  if (!observer) {\n    return;\n  }\n\n  observer.disconnect();\n}\n\n/**\n * On intersection\n * @param {array} entries\n */\nfunction onIntersection(entries) {\n  // Disconnect if we've already loaded all of the images\n  if (imageCount === 0) {\n    observer.disconnect();\n  }\n\n  // Loop through the entries\n  for (var _i2 = 0; _i2 < entries.length; _i2++) {\n    var entry = entries[_i2];\n    // Are we in viewport?\n    if (entry.intersectionRatio > 0) {\n      imageCount--;\n\n      // Stop watching and load the image\n      observer.unobserve(entry.target);\n      preloadImage(entry.target);\n    }\n  }\n}\n\n/**\n * Apply the image\n * @param {object} img\n * @param {string} src\n */\nfunction applyImage(img, src) {\n  // Prevent this from being lazy loaded a second time.\n  img.classList.add('dcf-lazy-img-handled');\n  img.src = src;\n  img.classList.add('dcf-fade-up');\n}"]}
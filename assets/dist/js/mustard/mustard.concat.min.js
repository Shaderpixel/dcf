/**
 * @project        dcf
 * @author         [object Object]
 * @copyright      Copyright (c) 2018, BSD-3-Clause
 *
 */
//@license richard
console.log("sayonara");const images=document.querySelectorAll(".dcf-lazy-img"),config={rootMargin:"0px",threshold:.5};let observer,imageCount=images.length;if("IntersectionObserver"in window){observer=new IntersectionObserver(onIntersection,config);for(let e=0;e<images.length;e++){let n=images[e];n.classList.contains("dcf-lazy-img-handled")||observer.observe(n)}}else loadImagesImmediately(images);function fetchImage(e){return new Promise((n,o)=>{const t=new Image;t.src=e,t.onload=n,t.onerror=o})}function preloadImage(e){const n=e.dataset.src;if(n)return fetchImage(n).then(()=>{applyImage(e,n)})}function loadImagesImmediately(e){for(let n=0;n<e.length;n++){preloadImage(e[n])}}function disconnect(){observer&&observer.disconnect()}function onIntersection(e){0===imageCount&&observer.disconnect();for(let n=0;n<e.length;n++){let o=e[n];o.intersectionRatio>0&&(imageCount--,observer.unobserve(o.target),preloadImage(o.target))}}function applyImage(e,n){e.classList.add("dcf-lazy-img-handled"),e.src=n,e.classList.add("dcf-fade-up")}
//# sourceMappingURL=mustard.concat.min.js.map

{"version":3,"sources":["dialog-polyfill.js","intersection-observer.js"],"names":["supportCustomEvent","window","CustomEvent","findNearestDialog","el","localName","parentElement","safeBlur","blur","document","body","inNodeList","nodeList","node","i","length","isFormMethodDialog","hasAttribute","getAttribute","toLowerCase","dialogPolyfillInfo","dialog","this","dialog_","replacedStyleTop_","openAsModal_","setAttribute","show","bind","showModal","close","returnValue","MutationObserver","maybeHideModal","observe","attributes","attributeFilter","timeout","removed","cb","downgradeModal","delayModel","ev","target","cand","type","substr","clearTimeout","setTimeout","forEach","name","addEventListener","Object","defineProperty","set","setOpen","get","backdrop_","createElement","className","backdropClick_","event","x","createEvent","initCustomEvent","bubbles","cancelable","detail","prototype","Event","contains","style","zIndex","top","parentNode","removeChild","dialogPolyfill","dm","removeDialog","value","removeAttribute","e","focus","fake","insertBefore","firstChild","tabIndex","redirectedEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","dispatchEvent","stopPropagation","focus_","querySelector","query","map","push","join","activeElement","updateZIndex","dialogZ","backdropZ","Error","open","pushDialog","s","getComputedStyle","invalid","k","ok","undefined","opacity","position","webkitOverflowScrolling","createsStackingContext","console","warn","needsCentering","reposition","nextSibling","opt_returnValue","closeEvent","element","scrollTop","documentElement","topValue","innerHeight","offsetHeight","Math","max","isInlinePositionSetByStylesheet","styleSheets","styleSheet","cssRules","j","rule","selectedNodes","querySelectorAll","selectorText","cssTop","getPropertyValue","cssBottom","bottom","forceRegisterDialog","HTMLDialogElement","registerDialog","DialogManager","pendingDialogStack","checkDOM","checkDOM_","overlay","forwardTab_","handleKey_","handleFocus_","zIndexLow_","zIndexHigh_","mo_","records","rec","c","removedNodes","Element","concat","blockDocument","childList","subtree","unblockDocument","removeEventListener","disconnect","updateStacking","dpi","last","appendChild","containedByTopDialog_","candidate","preventDefault","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","keyCode","cancelEvent","slice","indexOf","allowed","unshift","index","splice","formSubmitter","useValue","testForm","method","methodDescriptor","getOwnPropertyDescriptor","HTMLFormElement","realGet","call","realSet","v","defaultPrevented","form","offsetX","offsetY","nativeFormSubmit","submit","define","module","IntersectionObserverEntry","intersectionRatio","registry","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","_observationTargets","some","item","nodeType","_registerInstance","entry","_monitorIntersections","_checkForIntersections","unobserve","filter","_unmonitorIntersections","_unregisterInstance","takeRecords","_queuedEntries","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","margin","parts","exec","parseFloat","unit","_monitoringIntersections","_monitoringInterval","setInterval","addEvent","_domObserver","characterData","clearInterval","removeEvent","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","left","right","width","height","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","intersectionRect","_computeTargetAndRootIntersection","newEntry","time","performance","now","boundingClientRect","rootBounds","_hasCrossedThreshold","isIntersecting","_callback","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","root","overflow","min","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","targetArea","intersectionArea","Number","toFixed","callback","opt_options","fn","timer","options","rootMargin","opt_useCapture","attachEvent","detatchEvent","err","child","host"],"mappings":"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","file":"vendor.concat.min.js","sourcesContent":["(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (typeof define === 'function' && 'amd' in define) {\n    // AMD support\n    define(function() { return dialogPolyfill; });\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n","/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observing a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    // Round the intersection ratio to avoid floating point math issues:\n    // https://github.com/w3c/IntersectionObserver/issues/324\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibility state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its execution, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child element (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n"]}
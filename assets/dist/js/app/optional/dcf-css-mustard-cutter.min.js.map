{"version":3,"sources":["optional/dcf-css-mustard-cutter.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","root","factory","define","amd","exports","module","dcfCssMustardCutter","undefined","load","loadTag","tag","url","Promise","resolve","reject","element","document","createElement","parent","attr","onload","onerror","async","type","rel","appendChild","css","jsAsync","jsSync","img","mustardLoadersCSS","_arguments","Array","slice","call","arguments","_arguments$","cssPolyfills","forEach","csssPolyfill","testCondition","push","path","map","mustardLoader","catch","err","console","error"],"mappings":";;;;;;;AAAA,aAEA,IAAIA,QAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,IAErQ,SAAWG,EAAMC,GACK,mBAAXC,QAAyBA,OAAOC,IAC1CD,OAAO,GAAID,GACqE,YAAlD,oBAAZG,QAA0B,YAAcV,QAAQU,UAClEC,OAAOD,QAAUH,IAEjBD,EAAKM,oBAAsBL,IAN5B,MAQEM,EAAW,WAKb,IAAIC,EAAO,WACV,SAASC,EAAQC,GAChB,OAAO,SAAUC,GAEhB,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GACrC,IAAIC,EAAUC,SAASC,cAAcP,GACjCQ,EAAS,OACTC,EAAO,MAWX,OARAJ,EAAQK,OAAS,WAChBP,EAAQF,IAETI,EAAQM,QAAU,WACjBP,EAAOH,IAIAD,GACP,IAAK,eACJK,EAAQO,OAAQ,EAChB,MACD,IAAK,cACJP,EAAQO,OAAQ,EAChB,MACD,IAAK,OACJP,EAAQQ,KAAO,WACfR,EAAQS,IAAM,aACdL,EAAO,OACPD,EAAS,OAIXH,EAAQI,GAAQR,EAChBK,SAASE,GAAQO,YAAYV,MAKhC,MAAO,CACNW,IAAKjB,EAAQ,QACbkB,QAASlB,EAAQ,gBACjBmB,OAAQnB,EAAQ,eAChBoB,IAAKpB,EAAQ,QA3CJ,GAyEX,OApBA,WACC,IAAIqB,EAAoB,GACpBC,EAAaC,MAAMjC,UAAUkC,MAAMC,KAAKC,WACxCC,EAAcL,EAAW,GACzBM,OAA+B9B,IAAhB6B,EAA4B,GAAKA,EACzCL,EAAWE,MAAM,GAG5BI,EAAaC,QAAQ,SAAUC,GACzBA,EAAaC,eACjBV,EAAkBW,KAAKF,EAAaG,QAItCZ,EAAkBa,IAAI,SAAUC,GAC/B,OAAOpC,EAAKkB,IAAIkB,KACdC,MAAM,SAAUC,GAClBC,QAAQC,MAAM,aAAeF","file":"dcf-css-mustard-cutter.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n;(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.dcfCssMustardCutter = factory();\n\t}\n})(undefined, function () {\n\t/** THIS IS STILL A WIP: LOAD function can possibly be separated out into its own module and be a\n  *  dependent for mustard cutters or other modules that has use for script injectors\n  *  **/\n\t// https://davidwalsh.name/javascript-loader\n\tvar load = function () {\n\t\tfunction loadTag(tag) {\n\t\t\treturn function (url) {\n\t\t\t\t// This promise will be used by Promise.all to determine success or failure\n\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\tvar element = document.createElement(tag);\n\t\t\t\t\tvar parent = 'head';\n\t\t\t\t\tvar attr = 'src';\n\n\t\t\t\t\t// Important success and error for the promise\n\t\t\t\t\telement.onload = function () {\n\t\t\t\t\t\tresolve(url);\n\t\t\t\t\t};\n\t\t\t\t\telement.onerror = function () {\n\t\t\t\t\t\treject(url);\n\t\t\t\t\t};\n\n\t\t\t\t\t// Need to set different attributes depending on tag type\n\t\t\t\t\tswitch (tag) {\n\t\t\t\t\t\tcase 'script:async':\n\t\t\t\t\t\t\telement.async = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'script:sync':\n\t\t\t\t\t\t\telement.async = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'link':\n\t\t\t\t\t\t\telement.type = 'text/css';\n\t\t\t\t\t\t\telement.rel = 'stylesheet';\n\t\t\t\t\t\t\tattr = 'href';\n\t\t\t\t\t\t\tparent = 'head';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Inject into document to kick off loading\n\t\t\t\t\telement[attr] = url;\n\t\t\t\t\tdocument[parent].appendChild(element);\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tcss: loadTag('link'),\n\t\t\tjsAsync: loadTag('script:async'),\n\t\t\tjsSync: loadTag('script:sync'),\n\t\t\timg: loadTag('img')\n\t\t};\n\t}();\n\n\t/**\n  * MustardCutter\n  * @params\n  * @cssPolyfills: an array of objects, each object contains testCondition and path to the css file\n  * @entries: an array of paths to files that needs to be run in sequence\n  * */\n\tfunction CssMustardCutter() {\n\t\tvar mustardLoadersCSS = [],\n\t\t    _arguments = Array.prototype.slice.call(arguments),\n\t\t    _arguments$ = _arguments[0],\n\t\t    cssPolyfills = _arguments$ === undefined ? [] : _arguments$,\n\t\t    rest = _arguments.slice(1);\n\n\n\t\tcssPolyfills.forEach(function (csssPolyfill) {\n\t\t\tif (!csssPolyfill.testCondition) {\n\t\t\t\tmustardLoadersCSS.push(csssPolyfill.path);\n\t\t\t}\n\t\t});\n\n\t\tmustardLoadersCSS.map(function (mustardLoader) {\n\t\t\treturn load.css(mustardLoader);\n\t\t}).catch(function (err) {\n\t\t\tconsole.error('Failed at ' + err);\n\t\t});\n\t}\n\treturn CssMustardCutter;\n});"]}
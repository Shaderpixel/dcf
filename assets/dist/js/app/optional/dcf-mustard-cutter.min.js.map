{"version":3,"sources":["optional/dcf-mustard-cutter.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","root","factory","define","amd","exports","module","dcfMustardCutter","undefined","_arguments","arguments","mustardLoaderJS","mustardLoaderCSS","console","log","_arguments$jsPolyfill","jsPolyfills","_arguments$cssPolyfil","cssPolyfills","entries","window","promisePolyfill","document","createElement","el","src","async","head","appendChild","forEach","jsPolyfill","testCondition","push","path","csssPolyfill"],"mappings":";;;;;;;AAAA,aAEA,IAAIA,QAA4B,mBAAXC,QAAoD,iBAApBA,OAAOC,SAAwB,SAAUC,GAAO,cAAcA,GAAS,SAAUA,GAAO,OAAOA,GAAyB,mBAAXF,QAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,gBAAkBF,IAErQ,SAAWG,EAAMC,GACK,mBAAXC,QAAyBA,OAAOC,IAC1CD,OAAO,GAAID,GACqE,YAAlD,oBAAZG,QAA0B,YAAcV,QAAQU,UAClEC,OAAOD,QAAUH,IAEjBD,EAAKM,iBAAmBL,IANzB,MAQEM,EAAW,WACb,IAAIC,EAAaC,UA+EjB,OAlCoB,WACnB,IAAIC,EAAkB,GAClBC,EAAmB,GACvBC,QAAQC,IAAIL,GACZ,IAAIM,EAAwBN,EAAWO,YACnCA,OAAwCR,IAA1BO,EAAsC,GAAKA,EACzDE,EAAwBR,EAAWS,aACnCA,OAAyCV,IAA1BS,EAAsC,GAAKA,EACrCR,EAAWU,QAIpC,KAAM,YAAaC,QAAS,CAC3B,IAAIC,EAAkBC,SAASC,cAAc,UAC7CC,GAAGC,IAAM,6BACTD,GAAGE,OAAQ,EACXJ,SAASK,KAAKC,YAAYP,GAG3BL,EAAYa,QAAQ,SAAUC,GACxBA,EAAWC,eACfpB,EAAgBqB,KAAKF,EAAWG,QAIlCf,EAAaW,QAAQ,SAAUK,GACzBA,EAAaH,eACjBnB,EAAiBoB,KAAKE,EAAaD,QAIrCpB,QAAQC,IAAI,gBAAkBE,GAC9BH,QAAQC,IAAI,iBAAmBI","file":"dcf-mustard-cutter.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n;(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.dcfMustardCutter = factory();\n\t}\n})(undefined, function () {\n\tvar _arguments = arguments;\n\n\tfunction load() {\n\t\tfunction loadTag(tag) {\n\t\t\treturn function (url) {\n\t\t\t\t// This promise will be used by Promise.all to determine success or failure\n\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\tvar element = document.createElement(tag);\n\t\t\t\t\tvar parent = 'body';\n\t\t\t\t\tvar attr = 'src';\n\n\t\t\t\t\t// Important success and error for the promise\n\t\t\t\t\telement.onload = function () {\n\t\t\t\t\t\tresolve(url);\n\t\t\t\t\t};\n\t\t\t\t\telement.onerror = function () {\n\t\t\t\t\t\treject(url);\n\t\t\t\t\t};\n\n\t\t\t\t\t// Need to set different attributes depending on tag type\n\t\t\t\t\tswitch (tag) {\n\t\t\t\t\t\tcase 'script':\n\t\t\t\t\t\t\telement.async = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'link':\n\t\t\t\t\t\t\telement.type = 'text/css';\n\t\t\t\t\t\t\telement.rel = 'stylesheet';\n\t\t\t\t\t\t\tattr = 'href';\n\t\t\t\t\t\t\tparent = 'head';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Inject into document to kick off loading\n\t\t\t\t\telement[attr] = url;\n\t\t\t\t\tdocument[parent].appendChild(element);\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tcss: loadTag('link'),\n\t\t\tjs: loadTag('script'),\n\t\t\timg: loadTag('img')\n\t\t};\n\t}\n\n\tvar MustardCutter = function MustardCutter() {\n\t\tvar mustardLoaderJS = [];\n\t\tvar mustardLoaderCSS = [];\n\t\tconsole.log(_arguments);\n\t\tvar _arguments$jsPolyfill = _arguments.jsPolyfills,\n\t\t    jsPolyfills = _arguments$jsPolyfill === undefined ? [] : _arguments$jsPolyfill,\n\t\t    _arguments$cssPolyfil = _arguments.cssPolyfills,\n\t\t    cssPolyfills = _arguments$cssPolyfil === undefined ? [] : _arguments$cssPolyfil,\n\t\t    _arguments$entries = _arguments.entries,\n\t\t    entries = _arguments$entries === undefined ? [] : _arguments$entries;\n\n\n\t\tif (!('Promise' in window)) {\n\t\t\tvar promisePolyfill = document.createElement(\"script\");\n\t\t\tel.src = 'mustard/es6-promise.min.js';\n\t\t\tel.async = false; // Keep the execution order\n\t\t\tdocument.head.appendChild(promisePolyfill);\n\t\t}\n\n\t\tjsPolyfills.forEach(function (jsPolyfill) {\n\t\t\tif (!jsPolyfill.testCondition) {\n\t\t\t\tmustardLoaderJS.push(jsPolyfill.path);\n\t\t\t}\n\t\t});\n\n\t\tcssPolyfills.forEach(function (csssPolyfill) {\n\t\t\tif (!csssPolyfill.testCondition) {\n\t\t\t\tmustardLoaderCSS.push(csssPolyfill.path);\n\t\t\t}\n\t\t});\n\n\t\tconsole.log('jsPolyfills: ' + jsPolyfills);\n\t\tconsole.log('cssPolyfills: ' + cssPolyfills);\n\t};\n\treturn MustardCutter;\n});"]}